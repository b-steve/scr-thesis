{
    "collab_server" : "",
    "contents" : "#include <Rcpp.h>\n#include <math.h>\nusing namespace Rcpp;\n\n\n// ============================== //\n//        eucdist (matrix)        //\n// ============================== //\n/*\n * Calculating the Euclidean distance between a point and each trap.\n * Returns a vector of distances.\n * - Not exported.\n */\n//// [[Rcpp::export]]\nNumericMatrix eucdist_nll(NumericMatrix points,\n                          NumericMatrix traplocations) {\n  NumericMatrix dists(points.nrow(), traplocations.nrow());\n  for(int i = 0;  i < points.nrow(); i++) {\n    for(int j = 0; j < traplocations.nrow(); j++) {\n      dists(i, j) = sqrt(pow(points(i, 0) - traplocations(j, 0), 2.0)\n                         + pow(points(i, 1) - traplocations(j, 1), 2.0));\n    }\n  }\n  return dists;\n}\n\n// =================================================================================== //\n// =================================================================================== //\n\n// ============================== //\n//            scr_nll             //\n// ============================== //\n/*\n* Calculating the Euclidean distance between a point and each trap.\n* Returns a vector of distances.\n*/\n// [[Rcpp::export]]\ndouble scr_nll(NumericVector pars,\n               NumericMatrix caps,\n               NumericMatrix traps,\n               NumericMatrix mask) {\n  // Storing/initialising (starting) parameter values.\n  double D = exp(pars[0]);\n  double g0 = 1 / (1 + exp(pars[1]));\n  double sigma = exp(pars[2]);\n\n  // Number of animals detected.\n  int n = caps.nrow();\n  // Number of traps. NB: NOT USED\n  //int nTraps = traps.nrow();\n  // Number of mask points.\n  int nMask = mask.nrow();\n  // Area of a single mask pixel.\n  double area = mask.attr(\"area\");\n\n  /*\n   * Constructing distance matrix.\n   * - Element (i, j) gives dist. b/w ith mask pint and jth trap.\n   */\n  NumericMatrix maskDists = eucdist_nll(mask, traps);\n\n  /*\n   * Constructing a detection probability matrix.\n   * - Element (i, j) gives prob. of animal @ ith mask pt. being detected @ jth trap.\n   */\n  NumericMatrix maskProbs(maskDists.nrow(), maskDists.ncol());\n  for(int i = 0; i < maskDists.nrow(); i++) {\n    for(int j = 0; j < maskDists.ncol(); j++) {\n      maskProbs(i, j) = g0 * exp(-pow(maskDists(i, j), 2.0) / (2 * pow(sigma, 2.0)));\n    }\n  }\n\n  /*\n   * Constructing a detection probability vector\n   * - ith element = P(animal @ ith mask pt. is detected by >= 1 trap)\n   */\n  NumericVector pAvoid(maskProbs.nrow());\n  for(int i = 0; i < maskProbs.nrow(); i++) {\n    pAvoid[i] = 1 - maskProbs(i, 0);\n    for(int j = 1; j < maskProbs.ncol(); j++) {\n      pAvoid[i] *= 1 - maskProbs(i, j);\n    }\n  }\n\n  // Vector of probability of detection at each mask point.\n  NumericVector pDetected = 1 - pAvoid;\n\n  /*\n   * Calculating likelihood contribution\n   * - Contribution from each detected animal's capt. hist.\n   */\n  NumericVector fCapt(n);\n  NumericVector logfCapt_givenS(nMask);\n  for(int i = 0; i < n; i++) {\n    for(int j = 0; j < nMask; j++) {\n      /*\n       * Calculating log-probability of animal's capt. hist,\n       * conditional on being at the jth mask point.\n       * - Note that 'caps' and 'maskProbs' both have the same ncol();\n       *    - i.e. # traps\n       *  - Also note: R::dbinom(double x, double n, double p, int lg)\n       *    - Where 'int lg' is 0 = F, 1 = T.\n       */\n      logfCapt_givenS[j] = R::dbinom(caps(i, 0), 1, maskProbs(j, 0), 1);\n      for(int k = 1; k < caps.ncol(); k++) {\n        logfCapt_givenS[j] += R::dbinom(caps(i, k), 1, maskProbs(j, k), 1);\n      }\n    }\n    // Summing probabilities over all mask points.\n    fCapt[i] = sum(exp(logfCapt_givenS));\n  }\n\n  /*\n   * Log-likelihood contribution from all capture histories\n   * - Calculated by log of sum of individual likelihood contributions.\n   */\n  double logfCapt = sum(log(fCapt + DBL_MIN));\n\n  // Calculating effective survey area (unused in likelihood).\n  double esa = area * sum(pDetected);\n\n  // Log-likelihood contribution from number of animals detected.\n  double logf_n = R::dpois(n, D * esa, 1);\n\n  // Overall log-likelihood.\n  double logLik = logf_n + logfCapt - n * log(sum(pDetected));\n\n  return -logLik;\n}\n\n// =================================================================================== //\n// =================================================================================== //\n\n",
    "created" : 1501026959127.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1718795092",
    "id" : "2EB6C8C2",
    "lastKnownWriteTime" : 1501465936,
    "last_content_update" : 1502688911163,
    "path" : "~/Business/University/Master's/Project/Package/scr/src/scr-fit.cpp",
    "project_path" : "src/scr-fit.cpp",
    "properties" : {
        "docOutlineVisible" : "0"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "cpp"
}