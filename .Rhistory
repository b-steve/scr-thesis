## Unlinking estimates.
## D:
exp(fit$par[1])
## g0:
plogis(fit$par[2])
## sigma:
exp(fit$par[3])
##       locations. Needs to have attribute 'area', providing the area
##       of a single pixel.
scr.nllRAW <- function(pars, capt, traps, mask){
## Unlinking parameters
D <- exp(pars[1])
g0 <- plogis(pars[2])
sigma <- exp(pars[3])
## Number of animals detected.
n <- nrow(capt)
## Number of traps.
n.traps <- nrow(traps)
## Number of mask points.
n.mask <- nrow(mask)
## Area of a single mask pixel.
a <- attr(mask, "area")
## Constructing a distance matrix. The element (i, j) gives the
## distance between the ith mask point and the jth trap.
mask.dists <- crossdist(mask[, 1], mask [, 2],
traps[, 1], traps[, 2])
## Constructing a detection probability matrix. The element (i, j)
## gives the probability of an animal located at the ith mask
## point being detected at the jth trap.
mask.probs <- g0*exp(-mask.dists^2/(2*sigma^2))
## Constructing a detection probability vector. The ith element
## gives the probability of an animal located at the ith mask
## point being detected by *at least one* trap.
p.avoid <- apply(1 - mask.probs, 1, prod)
p.det <- 1 - p.avoid
##Calculating likelihood contribution due to each
## detected animal's capture history.
f.capt <- numeric(n)
for (i in 1:n){
## Calculating the log-probability of the animal's capture
## history, conditional on being at the jth mask point.
log.f.capt.given.s <- numeric(n.mask)
for (j in 1:n.mask){
log.f.capt.given.s[j] <- sum(dbinom(capt[i, ], 1, mask.probs[j, ], log = TRUE))
}
## Summing the probabilities over all mask points.
f.capt[i] <- sum(exp(log.f.capt.given.s))
}
## Log-likelihood contribution from all capture histories
## calculated by the log of the sum of the individual likelihood
## contributions.
log.f.capt <- sum(log(f.capt + .Machine$double.xmin))
## Calculating the effective survey area (not used in likelihood here).
esa <- a*sum(p.det)
## Log-likelihood contribution from the number of animals
## detected.
log.f.n <- dpois(n, D*esa, log = TRUE)
## Overall log-likelihood. I can never remember where the last bit
## comes from, but you need it.
ll <- log.f.n + log.f.capt - n*log(sum(p.det))
## Returning negative log-likelihood.
-ll
}
fit <- optim(par.start, scr.nllRAW, capt = test.data$bin.capt, traps = test.data$traps, mask = test.data$mask)
## Unlinking estimates.
## D:
exp(fit$par[1])
## g0:
plogis(fit$par[2])
## sigma:
exp(fit$par[3])
library(spatstat)
fit <- optim(par.start, scr.nllRAW, capt = test.data$bin.capt, traps = test.data$traps, mask = test.data$mask)
## Unlinking estimates.
## D:
exp(fit$par[1])
## g0:
plogis(fit$par[2])
## sigma:
exp(fit$par[3])
fit2 <- optim(par.start, scr.nll, caps = test.data$bin.capt, traps = test.data$traps, mask = test.data$mask)
## Unlinking estimates.
## D:
exp(fit$par[1])
## g0:
plogis(fit$par[2])
## sigma:
exp(fit$par[3])
?dbinom
dbinom(1, 1, 0.5)
dbinom(1, 1, 0.75)
dbinom(0.314, 1, 0.5)
dbinom(20, 1, 0.5)
dbinom(10, 1, 0.5)
dbinom(3, 1, 0.5)
dbinom(3, 10, 0.5)
dbinom(3, 10, 0.5)
choose(10, 3) * 0.5^3 * (1 - 0.5)^(10 - 3)
dbinom(3, 10, 0.5, log = TRUE)
log(choose(10, 3)) + 3 * log(0.5) + (10 - 3) * log(1 - 0.5)
366000+1704000+1373000
file.exists("~/.ssh/id_rsa.pub")
library(secr)
secr.fit
debug(secr.fit)
testcapt = test.data$bin.capt
testtrap = test.data$traps
testmask = test.data$mask
load("~/Business/University/Master's/Project/Likelihood/test-data.RData")
testcapt = test.data$bin.capt
testtrap = test.data$traps
testmask = test.data$mask
secr.fit(testcapt, mask = testmask, detectfn = "HN")
library(scr)
undebug(secr)
undebug(secr.fit)
scr.sim
scr.nll
secr.fit(testcapt, mask = testmask, detectfn = "HN")
make.capthist(testcapt, testtrap, fmt = "trapID")
load("~/Business/University/Master's/Project/Likelihood/test-data.RData")
testcapt = test.data$bin.capt
testtrap = test.data$traps
testmask = test.data$mask
par.start <- c(log(0.1), qlogis(0.5), log(50))
library(scr)
library(spatstat)
library(secr)
optim(par.start, scr.nll, caps = test.data$bin.capt, traps = test.data$traps, mask = test.data$mask)
fit = optim(par.start, scr.nll, caps = test.data$bin.capt, traps = test.data$traps, mask = test.data$mask)
?optim
## A required package.
library(spatstat)
## Computes the negative log-likelihood function for a simple SCR
## model.
##
## Arguments are as follows:
##
## pars: A vector of parameters at which to compute the
##       log-likelihood. They should appear in the following order:
##       (1) log(D), (2) logit(g0), (3) log(sigma).
##
## capt: Matrix of capture histories.
##
## traps: Matrix containing x- and y-coordinates of trap locations.
##
## mask: Matrix containing x- and y-coordinates of mask point
##       locations. Needs to have attribute 'area', providing the area
##       of a single pixel.
scr.nll <- function(pars, capt, traps, mask){
## Unlinking parameters
D <- exp(pars[1])
g0 <- plogis(pars[2])
sigma <- exp(pars[3])
## Number of animals detected.
n <- nrow(capt)
## Number of traps.
n.traps <- nrow(traps)
## Number of mask points.
n.mask <- nrow(mask)
## Area of a single mask pixel.
a <- attr(mask, "area")
## Constructing a distance matrix. The element (i, j) gives the
## distance between the ith mask point and the jth trap.
mask.dists <- crossdist(mask[, 1], mask [, 2],
traps[, 1], traps[, 2])
## Constructing a detection probability matrix. The element (i, j)
## gives the probability of an animal located at the ith mask
## point being detected at the jth trap.
mask.probs <- g0*exp(-mask.dists^2/(2*sigma^2))
## Constructing a detection probability vector. The ith element
## gives the probability of an animal located at the ith mask
## point being detected by *at least one* trap.
p.avoid <- apply(1 - mask.probs, 1, prod)
p.det <- 1 - p.avoid
##Calculating likelihood contribution due to each
## detected animal's capture history.
f.capt <- numeric(n)
for (i in 1:n){
## Calculating the log-probability of the animal's capture
## history, conditional on being at the jth mask point.
log.f.capt.given.s <- numeric(n.mask)
for (j in 1:n.mask){
log.f.capt.given.s[j] <- sum(dbinom(capt[i, ], 1, mask.probs[j, ], log = TRUE))
}
## Summing the probabilities over all mask points.
f.capt[i] <- sum(exp(log.f.capt.given.s))
}
## Log-likelihood contribution from all capture histories
## calculated by the log of the sum of the individual likelihood
## contributions.
log.f.capt <- sum(log(f.capt + .Machine$double.xmin))
## Calculating the effective survey area (not used in likelihood here).
esa <- a*sum(p.det)
## Log-likelihood contribution from the number of animals
## detected.
log.f.n <- dpois(n, D*esa, log = TRUE)
## Overall log-likelihood. I can never remember where the last bit
## comes from, but you need it.
ll <- log.f.n + log.f.capt - n*log(sum(p.det))
## Returning negative log-likelihood.
-ll
}
debug(scr.nll)
## Some start values: D = 0.1, g0 = 0.5, sigma = 50.
par.start <- c(log(0.1), qlogis(0.5), log(50))
fit <- optim(par.start, scr.nll, capt = test.data$bin.capt, traps = test.data$traps, mask = test.data$mask)
log.f.capt.given.s
dim(log.f.capt.given.s)
class(log.f.capt.given.s)
capt
mask.probs
class(mask.probs)
dim(mask.probs)
rm(scr.nll)
library(scr)
scr.fit(testcapt, testtrap, testmask, start = par.start)
library(roxygen2)
roxygenise()
scr.fit(testcapt, testtrap, testmask, start = par.start)
scr.fit(testcapt, testtrap, testmask, start = par.start)
library(scr)
scr.fit(testcapt, testtrap, testmask, start = par.start)
library(scr)
load("~/Business/University/Master's/Project/Likelihood/test-data.RData")
par.start <- c(log(0.1), qlogis(0.5), log(50))
library(scr)
optim(par.start, scr.nll, caps = test.data$bin.capt, traps = test.data$traps, mask = test.data$mask)
scr.fit
scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start)
library(roxygen2)
?scr.sim
?secr.fit
library(secr)
?secr.fit
roxygenise()
?scr.fit
library(scr)
scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start)
library(scr)
scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start)
roxygenise()
library(scr)
?scr
??scr
roxygenise()
library(scr)
?scr.fit
?scr.sim
secr.fit(testcapt, mask = testmask, detectfn = "HN")
testfit = secr.fit(test.data$bin.capt, mask = test.data$mask, detectfn = "HN")
make.capthist(test.data$bin.capt, test.data$traps)
make.capthist(data = test.data$bin.capt, test.data$traps)
?make.capthist
?read.traps
read.traps(data = test.data$traps)
testcapt = test.data$bin.capt
testtrap = test.data$traps
testmask = test.data$mask
testtrap = data.frame(cbind(1:nrow(testtrap), testtrap))
colnames(testtrap) = c("trapID", "x", "y")
testtrap = read.traps(data = testtrap, detector = "proximity")
testmask = make.mask(testtrap)#, type = "trapbuffer", buffer = 10 * 5)
testcapt = toCapthist(testcapt)
testcapt = make.capthist(testcapt, testtrap, fmt = "trapID")
testfit = secr.fit(testcapt, mask = testmask, detectfn = "HN")
predict(testfit)
scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, par.start)
library(secr)
test.data
test.data$bin.capt
toCapthist(test.data$bin.capt)
library(Bhat)
plkhci(
)
plkhci
testcapt
class(testcapt)
class(testcapt) == "capthist"
attributes(testcapt)
testcapt[, 1, ]
class(testcapt[, 1, ])
?substitute
?switch
?dpois
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::depends
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
roxygenise()
Rcpp::sourceCpp('src/scr-fit.cpp')
install.package("RcppParallel")
install.packages("RcppParallel")
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
library(roxygen)
library(roxygen2)
roxygenise()
Rcpp::sourceCpp('src/scr-fit.cpp')
roxygenise()
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
install.packages("Rcpp")
install.packages("Rcpp")
library(installr)
updateR()
update.packages()
Rcpp::sourceCpp('src/scr.cpp')
Rcpp::sourceCpp('src/scr.cpp')
roxygenise()
library(roxygen2)
roxygenise()
Rcpp::sourceCpp('src/scr-fit.cpp')
roxygenise()
Rcpp::sourceCpp('src/scr-fit.cpp')
library(scr)
Rcpp::sourceCpp('~/Business/University/Master\'s/Project/Package/scr/src/scr-fit.cpp')
Rcpp::sourceCpp('~/Business/University/Master\'s/Project/Package/scr/src/scr-fit.cpp')
Rcpp::sourceCpp('~/Business/University/Master\'s/Project/Package/scr/src/scr-fit.cpp')
Rcpp::sourceCpp('~/Business/University/Master\'s/Project/Package/scr/src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
Rcpp::sourceCpp('src/scr-fit.cpp')
library(secr)
library(scr)
library(spatstat)
scr_nll
scr.nll
scr.fit
load("~/Business/University/Master's/Project/Likelihood/test-data.RData")
par.start <- c(log(0.1), qlogis(0.5), log(50))
?system.time
system.time(optim(par.start, scr.nll, caps = test.data$bin.capt, traps = test.data$traps, mask = test.data$mask))
scr.nllRAW <- function(pars, capt, traps, mask){
## Unlinking parameters
D <- exp(pars[1])
g0 <- plogis(pars[2])
sigma <- exp(pars[3])
## Number of animals detected.
n <- nrow(capt)
## Number of traps.
n.traps <- nrow(traps)
## Number of mask points.
n.mask <- nrow(mask)
## Area of a single mask pixel.
a <- attr(mask, "area")
## Constructing a distance matrix. The element (i, j) gives the
## distance between the ith mask point and the jth trap.
mask.dists <- crossdist(mask[, 1], mask [, 2],
traps[, 1], traps[, 2])
## Constructing a detection probability matrix. The element (i, j)
## gives the probability of an animal located at the ith mask
## point being detected at the jth trap.
mask.probs <- g0*exp(-mask.dists^2/(2*sigma^2))
## Constructing a detection probability vector. The ith element
## gives the probability of an animal located at the ith mask
## point being detected by *at least one* trap.
p.avoid <- apply(1 - mask.probs, 1, prod)
p.det <- 1 - p.avoid
##Calculating likelihood contribution due to each
## detected animal's capture history.
f.capt <- numeric(n)
for (i in 1:n){
## Calculating the log-probability of the animal's capture
## history, conditional on being at the jth mask point.
log.f.capt.given.s <- numeric(n.mask)
for (j in 1:n.mask){
log.f.capt.given.s[j] <- sum(dbinom(capt[i, ], 1, mask.probs[j, ], log = TRUE))
}
## Summing the probabilities over all mask points.
f.capt[i] <- sum(exp(log.f.capt.given.s))
}
## Log-likelihood contribution from all capture histories
## calculated by the log of the sum of the individual likelihood
## contributions.
log.f.capt <- sum(log(f.capt + .Machine$double.xmin))
## Calculating the effective survey area (not used in likelihood here).
esa <- a*sum(p.det)
## Log-likelihood contribution from the number of animals
## detected.
log.f.n <- dpois(n, D*esa, log = TRUE)
## Overall log-likelihood. I can never remember where the last bit
## comes from, but you need it.
ll <- log.f.n + log.f.capt - n*log(sum(p.det))
## Returning negative log-likelihood.
-ll
system.time(optim(par.start, scr.nllRAW, capt = test.data$bin.capt, traps = test.data$traps, mask = test.data$mask))
##       of a single pixel.
scr.nllRAW <- function(pars, capt, traps, mask){
## Unlinking parameters
D <- exp(pars[1])
g0 <- plogis(pars[2])
sigma <- exp(pars[3])
## Number of animals detected.
n <- nrow(capt)
## Number of traps.
n.traps <- nrow(traps)
## Number of mask points.
n.mask <- nrow(mask)
## Area of a single mask pixel.
a <- attr(mask, "area")
## Constructing a distance matrix. The element (i, j) gives the
## distance between the ith mask point and the jth trap.
mask.dists <- crossdist(mask[, 1], mask [, 2],
traps[, 1], traps[, 2])
## Constructing a detection probability matrix. The element (i, j)
## gives the probability of an animal located at the ith mask
## point being detected at the jth trap.
mask.probs <- g0*exp(-mask.dists^2/(2*sigma^2))
## Constructing a detection probability vector. The ith element
## gives the probability of an animal located at the ith mask
## point being detected by *at least one* trap.
p.avoid <- apply(1 - mask.probs, 1, prod)
p.det <- 1 - p.avoid
##Calculating likelihood contribution due to each
## detected animal's capture history.
f.capt <- numeric(n)
for (i in 1:n){
## Calculating the log-probability of the animal's capture
## history, conditional on being at the jth mask point.
log.f.capt.given.s <- numeric(n.mask)
for (j in 1:n.mask){
log.f.capt.given.s[j] <- sum(dbinom(capt[i, ], 1, mask.probs[j, ], log = TRUE))
}
## Summing the probabilities over all mask points.
f.capt[i] <- sum(exp(log.f.capt.given.s))
}
## Log-likelihood contribution from all capture histories
## calculated by the log of the sum of the individual likelihood
## contributions.
log.f.capt <- sum(log(f.capt + .Machine$double.xmin))
## Calculating the effective survey area (not used in likelihood here).
esa <- a*sum(p.det)
## Log-likelihood contribution from the number of animals
## detected.
log.f.n <- dpois(n, D*esa, log = TRUE)
## Overall log-likelihood. I can never remember where the last bit
## comes from, but you need it.
ll <- log.f.n + log.f.capt - n*log(sum(p.det))
## Returning negative log-likelihood.
-ll
}
system.time(optim(par.start, scr.nllRAW, capt = test.data$bin.capt, traps = test.data$traps, mask = test.data$mask))
library(scr)
scr.fit
system.time(optim(par.start, scr.nll, capt = test.data$bin.capt, traps = test.data$traps, mask = test.data$mask))
library(scr)
?scr.fit
scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start)
fit <- optim(par.start, scr.nll, caps = test.data$bin.capt, traps = test.data$traps, mask = test.data$mask)
## Unlinking estimates.
## D:
exp(fit$par[1])
## g0:
plogis(fit$par[2])
## sigma:
exp(fit$par[3])
tfit = scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start)
exp(tfit$par[1])
tfit$par
tfit
exp(tfit[1])
system.time(scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start))
library(scr)
system.time(scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start))
library(scr)
system.time(scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start))
system.time(scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start))
traceback()
system.time(scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start))
debug(scr.fit)
system.time(scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start))
optim(start, scr.nll,
caps = capthist,
traps = traps,
mask = mask,
maskDists = maskDists)
?optim
scr.nll
library(scr)
system.time(scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start))
system.time(scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start))
library(scr)
system.time(scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start))
system.time(scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start))
replicate(system.time(scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start)), 1000)/1000
?replicate
replicate(1000, system.time(scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start)))/1000
replicate(100, system.time(scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start)))/100
replicate(10, system.time(scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start)))/10
system.time(replicate(10, scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start)))/10
system.time(replicate(10, scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start)))/10
library(scr)
system.time(replicate(10, scr.fit(test.data$bin.capt, test.data$traps, test.data$mask, start = par.start)))/10
